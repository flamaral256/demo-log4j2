# Global configuration attributes
# Every running Log4j system is a constellation of plugins, which is analogous to beans in Java EE and Spring.
# The main Configuration bean has a set of attributes that can be used to tune how the configuration file is used.
# I just set the configuration's name and its monitor interval. See the Plugin's Reference guide for more parameters.
name=flamaral256LogConfig
monitorInterval=0

# The Log4j runtime is composed of plugins, which are like beans in the Spring Framework and Java EE.
# Appender, layouts, filters, configuration loaders, and similar components are all accessed as plugins.

# All configuration files are represented internally as a tree of Nodes, which is translated into a tree of Log4j plugins.
# The tree's root creates a Configuration object. A node is a relatively simple structure representing a single Log4j plugin.

# Each node has: the attributes, the plugin type to be instantiated and a set of child nodes called nested elements.
# Properties that share a common prefix (e.g., appender.foo) are mapped to a subtree of the configuration node tree.
# Configuration attributes are specified by appending the property's name to the node (e.g., appender.foo.name).
# Nested elements are created by: Choosing an arbitrary id for the nested component (e.g., <0>); Appending the id
# to the prefix of the parent component (e.g., appender.foo.<0>); Specifying the type of the nested plugin by
# assigning a type attribute (e.g., appender.foo.<0>.type);

# Configures a console appender named CONSOLE with a pattern layout
appender.0.type=Console
appender.0.name=CONSOLE
appender.0.layout.type=PatternLayout
appender.0.layout.pattern=PrefixLog4j2 %d{ISO8601}{UTC}Z %t %-5level %logger{36} %M - %msg%n

# Configures a socket appender named ZMQ with a JSON template layout
# The Socket Appender writes its output to a remote destination using TCP or UDP sockets. You can optionally secure communication with TLS.
# The TCP and TLS variants write to the socket as a stream and do not expect a response from the target destination. When the target server
# closes its connection, some log events may continue to appear as delivered until a SocketException is raised, causing those events to be
# lost. If guaranteed delivery is required, a protocol that requires acknowledgments must be used.
appender.1.type=Socket
appender.1.name=ZMQ
appender.1.host=localhost
appender.1.port=6514
appender.1.protocol=tcp
appender.1.connectTimeoutMillis=0
#appender.1.readTimeoutMillis=0
appender.1.bufferedIo=true
appender.1.bufferSize=8192
appender.1.ignoreExceptions=true
appender.1.immediateFail=true
appender.1.immediateFlush=true
appender.1.layout.type=JsonTemplateLayout
#appender.1.ssl.type = Ssl
#appender.1.ssl.ks.type = KeyStore
#appender.1.ssl.ks.password = ${env:KEYSTORE_PASSWORD}
#appender.1.ssl.ts.type = TrustStore
#appender.1.ssl.ts.password = ${env:TRUSTSTORE_PASSWORD}

# Configures the root logger and connects it to the CONSOLE and ZMQ appender.
# The ZMQ appender will only log messages at least as severe as INFO.
# The CONSOLE appender will log everything.
rootLogger.level=ALL
rootLogger.appenderRef.0.ref=CONSOLE
rootLogger.appenderRef.1.ref=ZMQ
rootLogger.appenderRef.1.level=INFO

# Configures a logger named "org.flamaral256" at level ALL and connects it to the CONSOLE and ZMQ appender.
logger.0.name=org.flamaral256
logger.0.level=ALL
logger.0.additivity=false
logger.0.appenderRef.0.ref=CONSOLE
logger.0.appenderRef.1.ref=ZMQ
