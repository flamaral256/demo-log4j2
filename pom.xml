<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<name>demo-spring-jcl</name>
	<description>Demo project for logging setup</description>
	<groupId>org.flamaral256</groupId>
	<artifactId>demo-spring-jcl</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.5</version>
	</parent>

	<dependencies>
		<!-- The Java Class Library (JCL) is a set of dynamically loadable libraries that Java Virtual Machine (JVM) languages can call at run time.
		One of them is the spring implementation for the Apache Commons Logging's API, an ultra-thin bridge between different logging implementations. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jcl</artifactId>
		</dependency>
		<!-- for best practices we hide the log framework provider behind the SLF4J API for portability proposes such as change to logback with no code changes. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<!-- A new logger facade implementation better than SLF4J (but for best practices we still use it behind the SLF4J API for portability proposes) -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId> <!-- includes log4j-api transitive dependency-->
		</dependency>
		<!-- Redirect jul to log4j setting property java.util.logging.manager to org.apache.logging.log4j.jul.LogManager -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-jul</artifactId>
		</dependency>
		<!-- The SLF4J binding provided in this component cause all the SLF4J APIs to be routed to Log4j 2. Simply include the Log4j 2 SLF4J Binding jar
		along with the Log4j 2 jars and SLF4J API jar to cause all SLF4J logging to be handled by Log4j 2.-->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j2-impl</artifactId>
		</dependency>
		<!-- Log in json structured format -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<!-- Demonstrates log configuration in test scope using JUnit 5 = JUnit Platform + JUnit Jupiter -->
		<dependency>
			<groupId>org.junit.platform</groupId> <!-- run a test suite using one or more test engines -->
			<artifactId>junit-platform-suite-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency> <!-- you need at least one test engine -->
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
